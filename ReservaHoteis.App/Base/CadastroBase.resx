<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="imageList.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="imageList.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAI
        CQAAAk1TRnQBSQFMAgEBAgEAAdABAQHUAQEBGAEAARgBAAT/ASEBEAj/AUIBTQE2BwABNgMAASgDAAFg
        AwABGAMAAQEBAAEgBgABJBoAA0MBdwNXAbkDVwG5A1cBuQNXAbkDVwG5A1cBuQNXAbkDVwG5A1cBuQNX
        AbkDVwG5A1cBuQNXAbkDVwG5A08BmRgAAwUBBgMAAf8DAAH/AwAB/wMcASf/ABEAA10B6gNQAZ8DHQEp
        Ax0BKQMdASkDHQEpAx0BKQMdASkDHQEpAx0BKQMdASkDHQEpAx0BKQMdASkDHQEpAx0BKQM6AWEDAAH/
        FAADXwHVAxIB/gQAA14B1wMAAf8DHAEn/wAQAAH/JwAB/wNhAesDOwFjEAADWQHAAx0BKRAAA1sB5AND
        AfcIAANeAdcDAAH/Ax0BKP8ADAAB/yQAA2AB4AMcAScDTQGTAwAB/wNCAfYIAANVAa8DJAE0EAADEgEY
        AwAB/wNcAdYIAANeAdcDAAH/AxwBJ/8ACAAB/yQAAzQBUwNRAaQDOQFeAyYB+gNAAXEDQwH3BAADVQGv
        AyQBNBQAAx0BKAMAAf8DXAHWCAADXgHXAwAB/wMcASf/AAQAAf8rAAH/AyYB+ggAA0ABcQNCAfYDVQGv
        AyQBNBgAAx0BKAMAAf8DXAHWCAADXgHXAwAB/wMdASj/AAH/BwAB/wMAAf8DAAH/A04BmAMLAQ4DPwFu
        Az8BbgM/AW4EAANZAe4DSgGJDAADQAFxAwAB/wMkATQcAAMdASgDAAH/A1wB1ggAA14B1wMAAf8DHAEn
        +wAB/wQAA1AB8wQAAyoBQANRAaEDDAEQA0MBdgNDAXYDQwF2CAADWQHuA0oBiQwAA0ABcQNCAfYgAAMd
        ASgDAAH/A14B1wgAA14B1wMAAf8DHAEnBAAEAQM+AWoDVQGtA1UBrwNDAXYDBgEH2wAB/wQAA1AB8wQA
        AyoBQANRAaEDGQEiA1MBpgNTAaYDUwGmA1MBpgM/AWwEAANZAe4DSgGJDAADQAFxA0IB9iAAAx0BKAMA
        Af8DXgHXCAADXgHXAwAB/wM8AfgDAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DEgH+AxsBJdMAAf8HAAH/
        AwAB/wMAAf8DSwGMAwIBAwMpAT4DKQE+AykBPgMpAT4DFAEbCAADWQHuA0oBiQwAA0ABcQNCAfYgAAMd
        ASgDAAH/A1wB1gQAAzcBWgMAAf8DJgH6AxgBIRAAAwsBDgNdAeoDAAH/A04BlM8AAf84AANZAe4DSgGJ
        CAAEAQMAAf8DQwH3IAADHQEoAwAB/wNeAd0DAAH/A1MBpyAAAz4BawMAAf8DRAF4ywAB/wQAA1cB8QNX
        AfEDVwHxAz0BaSgAA1kB7gNKAYkEAQMAAf8DHwEsA04BlgNFAXwgAAMdASgDAAH/A1sBzSgAA0wBjgMA
        Af8DAgEDxwAB/wQAA1AB8wQAAyoBQANRAaEDKQE+A18B5QNfAeUDXwHlAwQBBRgAA1gB7wMAAf8DHwEs
        BAADKQE+A1UBrCAAA0kBhgMAAf8zAAH/A1wBy8cAAf8EAANQAfMEAAMqAUADUQGhBAEDJgE4AyYBOAMm
        ATgDJgE4AxEBFhQAA1UBrwMkAfwDVQGsAzMBUAMAAf8DCwEOIwAB/wNZAcEwAANEAXsDAAH/xwAB/wcA
        Af8DAAH/AwAB/wNSAaADGwElA1UBrANVAawDVQGsA1UBrANBAXIUAANVAa8DJQE2Az0BaQNSAaADCgEN
        JwAB/wMuAUgwAAMFAQYDAAH/xwAB/0AAA1UBrwMlATYzAAH/AxUBHTcAAf/HAAH/BAADSQGGA0kBhgNJ
        AYYDHQEoLAADVQGvAyUBNjMAAf8DKQE+MAAEAQMAAf/HAAH/BAADQwH3AzkBXgNJAYYDUQGhAz0BaAMA
        Af8DAAH/AwAB/wMJAQwMAANGAYEDUgGjA1IBowNeAeIDJQE2MwAB/wNUAaswAAM7AWUDAAH/xwAB/wQA
        A1AB8wQAAyoBQANRAaEfAAH/A0UBfAMqAUADSwGMAxIB/jQAA1EBogMAAf8IAANZAcEDYAHjEAADUAGd
        AxIB/ggAAxIB/gNbAeTHAAH/BAADJAH9A14B1wNiAeEDUQGhAzYBVwMAAf8DAAH/AwAB/wMAAf8DWwHQ
        AxUBHQNbAdAEAAMwAUwDEgH+PwAB/wNSAaAEAAMUARsDAAH/AwAB/wNVAfIDWwHkAwAB/wMAAf8DOgFi
        BAADNwFaAwAB/wMMAQ/HAAH/BAADCwEOAwsBDgMLAQ4cAAMeASoDWQG7AzABTAMSAf5AAAM9AWkDAAH/
        AzsBYwgAA0IBdANhAeYDVwHxA04BlwQBBAADIwEyAwAB/wNVAa3LAAH/LAADHgEqA1wB5wMSAf5IAANP
        AZsDAAH/A14B1wQBFAADVgGzAwAB/wNbAc3MAAMmATgDAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/
        AwAB/wMAAf8DAAH/AwAB/wMAAf8DJAH9UAADJgE4AwAB/wMAAf8DAAH/A2IB4QNeAd0DAAH/AwAB/wMA
        Af8DOgFi/wBhAAMeASoDVQGvA1cB8QNNAfQDVwG8AyoBQNQAAUIBTQE+BwABPgMAASgDAAFgAwABGAMA
        AQEBAAEBBQABIAEBFgAD/wEAAcABAAE/AQcC/wYAAYABAAEfASMC/wYAAb8B4wHPATEC/wYAAb8B4AHP
        ARgC/wYAAb8B4AFPAYwBfwH/BgABvwHzAQ8BxgE/Af8GAAGgARMBjwHjAR8B/wYAAagBGQHPAfEBiAEf
        BgABqAEEAecB+AHAAQcGAAGgAQYBcwH8AUMBwwYAAb8B/wExAf4BDwHxBgABoQH/AYAB/wEfAfgGAAGo
        AQ8BxAH/AT8B/AYAAagBBwHAAf8BPwH8BgABoAEHAcEB/wE/AfwGAAG/Af8BzwH/AT8B/gYAAaEB/wHP
        Af8BPwH8BgABoAEOAQ8B/wE/AfwGAAGpAfwBHwH/ATMBzAYAAaABAQE/Af8BkAEIBgABowH4AX8B/wGM
        AREGAAG/AfgC/wHDAeMGAAGAAQEC/wHgAQcGAAT/AfgBHxwACw==
</value>
  </data>
</root>